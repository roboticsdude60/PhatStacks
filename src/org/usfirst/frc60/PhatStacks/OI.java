// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc60.PhatStacks;

import org.usfirst.frc60.PhatStacks.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc60.PhatStacks.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton closeLowerArmsButton;
    public JoystickButton openLowerArmsButton;
    public Joystick driveJoystick;
    public JoystickButton closeUpperArmsButton;
    public JoystickButton openUpperArmsButton;
    public JoystickButton leanBackButton;
    public JoystickButton leanForwardButton;
    public Joystick joystick2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick2 = new Joystick(1);
        
        leanForwardButton = new JoystickButton(joystick2, 7);
        leanForwardButton.whenReleased(new LeanForward());
        leanBackButton = new JoystickButton(joystick2, 7);
        leanBackButton.whenPressed(new LeanBack());
        openUpperArmsButton = new JoystickButton(joystick2, 8);
        openUpperArmsButton.whenReleased(new OpenUpperArms());
        closeUpperArmsButton = new JoystickButton(joystick2, 8);
        closeUpperArmsButton.whenPressed(new CloseUpperArms());
        driveJoystick = new Joystick(0);
        
        openLowerArmsButton = new JoystickButton(driveJoystick, 1);
        openLowerArmsButton.whenReleased(new OpenLowerArms());
        closeLowerArmsButton = new JoystickButton(driveJoystick, 1);
        closeLowerArmsButton.whenPressed(new CloseLowerArms());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("CloseLowerArms", new CloseLowerArms());
        SmartDashboard.putData("CloseUpperArms", new CloseUpperArms());
        SmartDashboard.putData("LeanBack", new LeanBack());
        SmartDashboard.putData("LeanForward", new LeanForward());
        SmartDashboard.putData("OpenLowerArms", new OpenLowerArms());
        SmartDashboard.putData("OpenUpperArms", new OpenUpperArms());
        SmartDashboard.putData("DriveFromJoystick", new DriveFromJoystick());
        SmartDashboard.putData("LiftFromJoystick", new LiftFromJoystick());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriveJoystick() {
        return driveJoystick;
    }

    public Joystick getJoystick2() {
        return joystick2;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

